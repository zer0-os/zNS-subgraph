type Domain @entity {
  id: ID!
  indexId: Int
  name: String
  labelHash: String
  label: String
  parent: Domain
  subdomains: [Domain!]! @derivedFrom(field: "parent")
  owner: Account
  minter: Account
  lockedBy: Account
  isLocked: Boolean
  metadata: String
  metadataContents: String
  metadataName: String
  metadataImage: String
  metadataAnimation: String
  royaltyAmount: BigInt
  creationTimestamp: BigInt
  events: [DomainEvent!]! @derivedFrom(field: "domain")
  nonce: BigInt
  requests: [DomainRequest!]! @derivedFrom(field: "parent")
  contract: RegistrarContract
  domainGroup: DomainGroup
  domainGroupIndex: BigInt
}

interface DomainEvent {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
}

type DomainMinted implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  minter: Account!
}

type DomainTransferred implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  from: Account!
  to: Account!
}

type Account @entity {
  id: ID!
  ownedDomains: [Domain!]! @derivedFrom(field: "owner")
  mintedDomains: [Domain!]! @derivedFrom(field: "minter")
  requests: [DomainRequest!]! @derivedFrom(field: "requestor")
}

type DomainMetadataChanged implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  metadataUri: String!
}

type DomainMetadataLocked implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  isLocked: Boolean!
}

type DomainRoyaltyChanged implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  timestamp: BigInt!
  transactionID: Bytes!
  royaltyAmount: BigInt!
}

type DomainRequest @entity {
  id: ID!
  parent: Domain!
  offeredAmount: BigInt!
  requestUri: String!
  label: String!
  domain: String!
  requestor: Account!
  nonce: BigInt!
  approved: Boolean!
  fulfilled: Boolean!
  timestamp: BigInt!
}

type Global @entity {
  id: ID!
  domainCount: Int!
  domainsViaIndex: [Domain!]!
}

type RegistrarContract @entity {
  id: ID!
  rootDomain: Domain
  domains: [Domain!]! @derivedFrom(field: "contract")
  groups: [DomainGroup!]! @derivedFrom(field: "registrar")
}

type DomainGroup @entity {
  id: ID!
  groupId: BigInt!
  registrar: RegistrarContract!
  baseUri: String!
  domains: [Domain!]! @derivedFrom(field: "domainGroup")
}
